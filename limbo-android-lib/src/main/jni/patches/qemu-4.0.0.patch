diff -ru --no-dereference /tmp/qemu-4.0.0/accel/kvm/kvm-all.c ./accel/kvm/kvm-all.c
--- /tmp/qemu-4.0.0/accel/kvm/kvm-all.c	2019-04-23 21:14:45.000000000 +0300
+++ ./accel/kvm/kvm-all.c	2019-05-16 12:47:37.347790012 +0300
@@ -1563,7 +1563,12 @@
     s->vmfd = -1;
     s->fd = qemu_open("/dev/kvm", O_RDWR);
     if (s->fd == -1) {
+#ifdef __LIMBO__
+        //no m specifier in android
+        fprintf(stderr, "Could not access KVM kernel module: /dev/kvm\n");
+#else
         fprintf(stderr, "Could not access KVM kernel module: %m\n");
+#endif
         ret = -errno;
         goto err;
     }
diff -ru --no-dereference /tmp/qemu-4.0.0/block/vvfat.c ./block/vvfat.c
--- /tmp/qemu-4.0.0/block/vvfat.c	2019-04-23 21:14:45.000000000 +0300
+++ ./block/vvfat.c	2019-05-16 12:45:07.763626279 +0300
@@ -77,6 +77,10 @@
 #define DIR_KANJI_FAKE 0x05
 #define DIR_FREE 0x00
 
+#ifdef __LIMBO__
+int size_clusters = 0;
+#endif //__LIMBO__
+
 /* dynamic array functions */
 typedef struct array_t {
     char* pointer;
@@ -3058,8 +3062,15 @@
 
     for (i = sector2cluster(s, sector_num);
             i <= sector2cluster(s, sector_num + nb_sectors - 1); i++)
+#ifdef __LIMBO__
+        //FIXME: Limbo: For some reason the sector_num is lesser than the fake_sectors
+        // for now we add this check so qemu doesn't hang during a write operation
+        if (i >= 0 && i < size_clusters)
+            s->used_clusters[i] |= USED_ALLOCATED;
+#else
         if (i >= 0)
             s->used_clusters[i] |= USED_ALLOCATED;
+#endif
 
 DLOG(checkpoint());
     /* TODO: add timeout */
@@ -3157,6 +3168,11 @@
     int size = sector2cluster(s, s->sector_count);
     QDict *options;
 
+//Limbo:
+#ifdef __LIMBO__
+    size_clusters = size;
+#endif //__LIMBO__
+
     s->used_clusters = calloc(size, 1);
 
     array_init(&(s->commits), sizeof(commit_t));
diff -ru --no-dereference /tmp/qemu-4.0.0/configure ./configure
--- /tmp/qemu-4.0.0/configure	2019-04-23 21:14:45.000000000 +0300
+++ ./configure	2019-05-16 15:14:56.669573910 +0300
@@ -2278,7 +2278,8 @@
 # pkg-config probe
 
 if ! has "$pkg_config_exe"; then
-  error_exit "pkg-config binary '$pkg_config_exe' not found"
+  #error_exit "pkg-config binary '$pkg_config_exe' not found"
+  echo Limbo: ignoring pkg-config
 fi
 
 ##########################################
@@ -3009,7 +3010,8 @@
     sdlversion=$($sdlconfig --version)
   else
     if test "$sdl" = "yes" ; then
-      feature_not_found "sdl" "Install SDL2-devel"
+      # feature_not_found "sdl" "Install SDL2-devel"
+      echo Limbo: ignoring SDL2-devel
     fi
     sdl=no
     # no need to do the rest
@@ -3112,6 +3114,9 @@
   fi
 fi
 
+#Limbo: force sdl after bypassing probe
+sdl=yes
+
 ##########################################
 # RDMA needs OpenFabrics libraries
 if test "$rdma" != "no" ; then
@@ -3611,7 +3616,8 @@
 # glib support probe
 
 glib_req_ver=2.40
-glib_modules=gthread-2.0
+# Limbo: no need for gthread
+# glib_modules=gthread-2.0
 if test "$modules" = yes; then
     glib_modules="$glib_modules gmodule-export-2.0"
 fi
@@ -3727,8 +3733,9 @@
   pixman_cflags=$($pkg_config --cflags pixman-1)
   pixman_libs=$($pkg_config --libs pixman-1)
 else
-  error_exit "pixman >= 0.21.8 not present." \
+  # error_exit "pixman >= 0.21.8 not present." \
       "Please install the pixman devel package."
+  echo Limbo: ignoring pixman devel
 fi
 
 ##########################################
@@ -4029,6 +4036,9 @@
   preadv=yes
 fi
 
+#Limbo: preadv fails during linking
+preadv=no
+
 ##########################################
 # fdt probe
 # fdt support is mandatory for at least some target architectures,
@@ -5589,6 +5599,9 @@
     have_copy_file_range=yes
 fi
 
+# Limbo: no copy_file_range for Android
+have_copy_file_range=no
+
 ##########################################
 # check if struct fsxattr is available via linux/fs.h
 
diff -ru --no-dereference /tmp/qemu-4.0.0/include/ui/console.h ./include/ui/console.h
--- /tmp/qemu-4.0.0/include/ui/console.h	2019-04-23 21:14:46.000000000 +0300
+++ ./include/ui/console.h	2019-05-16 12:46:26.839691439 +0300
@@ -26,7 +26,13 @@
 #define QEMU_CAPS_LOCK_LED   (1 << 2)
 
 /* in ms */
+#ifdef __LIMBO__
+extern int limbo_sdl_scale_hint;
+extern int gui_refresh_interval_default;
+#define GUI_REFRESH_INTERVAL_DEFAULT gui_refresh_interval_default
+#else
 #define GUI_REFRESH_INTERVAL_DEFAULT    30
+#endif //__LIMBO__
 #define GUI_REFRESH_INTERVAL_IDLE     3000
 
 /* Color number is match to standard vga palette */
diff -ru --no-dereference /tmp/qemu-4.0.0/Makefile ./Makefile
--- /tmp/qemu-4.0.0/Makefile	2019-04-23 21:14:45.000000000 +0300
+++ ./Makefile	2019-05-16 12:49:19.991991417 +0300
@@ -308,7 +308,8 @@
 
 LIBS+=-lz $(LIBS_TOOLS)
 
-HELPERS-$(call land,$(CONFIG_SOFTMMU),$(CONFIG_LINUX)) = qemu-bridge-helper$(EXESUF)
+# Limbo: no need for this
+#HELPERS-$(call land,$(CONFIG_SOFTMMU),$(CONFIG_LINUX)) = qemu-bridge-helper$(EXESUF)
 
 ifdef BUILD_DOCS
 DOCS=qemu-doc.html qemu-doc.txt qemu.1 qemu-img.1 qemu-nbd.8 qemu-ga.8
@@ -416,8 +417,8 @@
                 audio-obj-y \
                 audio-obj-m \
                 trace-obj-y)
-
-include $(SRC_PATH)/tests/Makefile.include
+# Limbo: no need for this
+#include $(SRC_PATH)/tests/Makefile.include
 
 all: $(DOCS) $(if $(BUILD_DOCS),sphinxdocs) $(TOOLS) $(HELPERS-y) recurse-all modules
 
@@ -510,7 +511,8 @@
 qemu-nbd$(EXESUF): qemu-nbd.o $(authz-obj-y) $(block-obj-y) $(crypto-obj-y) $(io-obj-y) $(qom-obj-y) $(COMMON_LDADDS)
 qemu-io$(EXESUF): qemu-io.o $(authz-obj-y) $(block-obj-y) $(crypto-obj-y) $(io-obj-y) $(qom-obj-y) $(COMMON_LDADDS)
 
-qemu-bridge-helper$(EXESUF): qemu-bridge-helper.o $(COMMON_LDADDS)
+#Limbo: no need for this
+#qemu-bridge-helper$(EXESUF): qemu-bridge-helper.o $(COMMON_LDADDS)
 
 qemu-keymap$(EXESUF): qemu-keymap.o ui/input-keymap.o $(COMMON_LDADDS)
 
diff -ru --no-dereference /tmp/qemu-4.0.0/Makefile.target ./Makefile.target
--- /tmp/qemu-4.0.0/Makefile.target	2019-04-23 21:14:45.000000000 +0300
+++ ./Makefile.target	2019-05-16 12:51:04.236254663 +0300
@@ -200,8 +200,11 @@
 COMMON_LDADDS = ../libqemuutil.a
 
 # build either PROG or PROGW
-$(QEMU_PROG_BUILD): $(all-obj-y) $(COMMON_LDADDS)
-	$(call LINK, $(filter-out %.mak, $^))
+# Limbo: no need for the executable, will build the .so instead
+#$(QEMU_PROG_BUILD): $(all-obj-y) $(COMMON_LDADDS)
+#	$(call LINK, $(filter-out %.mak, $^))
+include ../../android-qemu-build.mak
+
 ifdef CONFIG_DARWIN
 	$(call quiet-command,Rez -append $(SRC_PATH)/pc-bios/qemu.rsrc -o $@,"REZ","$(TARGET_DIR)$@")
 	$(call quiet-command,SetFile -a C $@,"SETFILE","$(TARGET_DIR)$@")
diff -ru --no-dereference /tmp/qemu-4.0.0/migration/migration.c ./migration/migration.c
--- /tmp/qemu-4.0.0/migration/migration.c	2019-04-23 21:14:46.000000000 +0300
+++ ./migration/migration.c	2019-05-16 23:09:55.680078614 +0300
@@ -3448,11 +3448,16 @@
     qemu_mutex_destroy(&ms->qemu_file_lock);
     g_free(params->tls_hostname);
     g_free(params->tls_creds);
+
+#ifndef __LIMBO__
+//TODO: freeing causes crash for now we supress since the app is
+// about to close anyways
     qemu_sem_destroy(&ms->rate_limit_sem);
     qemu_sem_destroy(&ms->pause_sem);
     qemu_sem_destroy(&ms->postcopy_pause_sem);
     qemu_sem_destroy(&ms->postcopy_pause_rp_sem);
     qemu_sem_destroy(&ms->rp_state.rp_sem);
+#endif //__LIMBO__
     error_free(ms->error);
 }
 
diff -ru --no-dereference /tmp/qemu-4.0.0/monitor.c ./monitor.c
--- /tmp/qemu-4.0.0/monitor.c	2019-04-23 21:14:46.000000000 +0300
+++ ./monitor.c	2019-05-16 22:17:19.686597076 +0300
@@ -2270,6 +2270,13 @@
 {
     mon_fd_t *monfd;
 
+#ifdef __LIMBO__
+        //FIXME: The lookup for the fd fails below
+        //  so for now we treat the fdname as the actual fd
+        int fd_tmp = atoi(fdname);
+        return fd_tmp;
+#endif //__LIMBO__
+
     qemu_mutex_lock(&mon->mon_lock);
     QLIST_FOREACH(monfd, &mon->fds, next) {
         int fd;
diff -ru --no-dereference /tmp/qemu-4.0.0/ui/console.c ./ui/console.c
--- /tmp/qemu-4.0.0/ui/console.c	2019-04-23 21:14:46.000000000 +0300
+++ ./ui/console.c	2019-05-16 13:09:33.262270480 +0300
@@ -36,6 +36,11 @@
 #define DEFAULT_BACKSCROLL 512
 #define CONSOLE_CURSOR_PERIOD 500
 
+#ifdef __LIMBO__
+int gui_refresh_interval_default = 30;
+#endif //__LIMBO__
+
+
 typedef struct TextAttributes {
     uint8_t fgcol:4;
     uint8_t bgcol:4;
diff -ru --no-dereference /tmp/qemu-4.0.0/ui/sdl2-2d.c ./ui/sdl2-2d.c
--- /tmp/qemu-4.0.0/ui/sdl2-2d.c	2019-04-23 21:14:46.000000000 +0300
+++ ./ui/sdl2-2d.c	2019-05-16 13:01:26.138572680 +0300
@@ -127,6 +127,11 @@
                                       surface_width(new_surface),
                                       surface_height(new_surface));
     sdl2_2d_redraw(scon);
+
+#ifdef __LIMBO__
+    //TODO: Need to send the resolution to Limbo
+    Android_JNI_SetVMResolution(surface_width(new_surface), surface_height(new_surface));
+#endif //__ANDROID__
 }
 
 void sdl2_2d_refresh(DisplayChangeListener *dcl)
diff -ru --no-dereference /tmp/qemu-4.0.0/ui/sdl2.c ./ui/sdl2.c
--- /tmp/qemu-4.0.0/ui/sdl2.c	2019-04-23 21:14:46.000000000 +0300
+++ ./ui/sdl2.c	2019-05-16 13:04:41.834678642 +0300
@@ -87,7 +87,15 @@
                                          surface_width(scon->surface),
                                          surface_height(scon->surface),
                                          flags);
+#if defined(__LIMBO_SDL_FORCE_SOFTWARE_RENDERING__)
+    //LIMBO: We can force SOFTWARE rendering when some devices don't HARDWARE acceleration
+    scon->real_renderer = SDL_CreateRenderer(scon->real_window, -1, SDL_RENDERER_SOFTWARE);
+#elif defined(__LIMBO_SDL_FORCE_HARDWARE_RENDERING__)
+    scon->real_renderer = SDL_CreateRenderer(scon->real_window, -1, SDL_RENDERER_ACCELERATED);
+#else
     scon->real_renderer = SDL_CreateRenderer(scon->real_window, -1, 0);
+#endif
+
     if (scon->opengl) {
         scon->winctx = SDL_GL_GetCurrentContext();
     }
@@ -752,6 +760,10 @@
     }
 }
 
+#ifdef __LIMBO__
+int limbo_sdl_scale_hint = -1;
+#endif
+
 static void sdl2_display_init(DisplayState *ds, DisplayOptions *o)
 {
     uint8_t data = 0;
@@ -761,6 +773,7 @@
 
     assert(o->type == DISPLAY_TYPE_SDL);
 
+#ifndef __ANDROID__
 #ifdef __linux__
     /* on Linux, SDL may use fbcon|directfb|svgalib when run without
      * accessible $DISPLAY to open X11 window.  This is often the case
@@ -773,6 +786,12 @@
      */
     setenv("SDL_VIDEODRIVER", "x11", 0);
 #endif
+#else
+    if(limbo_sdl_scale_hint == 1) {
+        SDL_bool res = SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "1");
+        LOGI("Setting SDL_HINT_RENDER_SCALE_QUALITY to %d, code = %d", limbo_sdl_scale_hint, res);
+    }
+#endif
 
     if (SDL_Init(SDL_INIT_VIDEO)) {
         fprintf(stderr, "Could not initialize SDL(%s) - exiting\n",
diff -ru --no-dereference /tmp/qemu-4.0.0/ui/vnc.c ./ui/vnc.c
--- /tmp/qemu-4.0.0/ui/vnc.c	2019-04-23 21:14:46.000000000 +0300
+++ ./ui/vnc.c	2019-05-16 13:05:37.686527467 +0300
@@ -47,8 +47,20 @@
 #include "qemu/cutils.h"
 #include "io/dns-resolver.h"
 
+//LIMBO: we can override the refresh rate for VNC here
+#ifdef __LIMBO__
+int vnc_refresh_interval_base = 30;
+#define VNC_REFRESH_INTERVAL_BASE vnc_refresh_interval_base
+
+int vnc_refresh_interval_inc = 30;
+#define VNC_REFRESH_INTERVAL_INC vnc_refresh_interval_inc
+#else
+
 #define VNC_REFRESH_INTERVAL_BASE GUI_REFRESH_INTERVAL_DEFAULT
 #define VNC_REFRESH_INTERVAL_INC  50
+
+#endif //__LIMBO__
+
 #define VNC_REFRESH_INTERVAL_MAX  GUI_REFRESH_INTERVAL_IDLE
 static const struct timeval VNC_REFRESH_STATS = { 0, 500000 };
 static const struct timeval VNC_REFRESH_LOSSY = { 2, 0 };
diff -ru --no-dereference /tmp/qemu-4.0.0/util/qemu-openpty.c ./util/qemu-openpty.c
--- /tmp/qemu-4.0.0/util/qemu-openpty.c	2019-04-23 21:14:46.000000000 +0300
+++ ./util/qemu-openpty.c	2019-05-16 13:06:38.342406923 +0300
@@ -108,6 +108,10 @@
 }
 #endif
 
+
+#ifdef __ANDROID__
+int qemu_openpty_raw(int *aslave, char *pty_name){return -1;}
+#else
 int qemu_openpty_raw(int *aslave, char *pty_name)
 {
     int amaster;
@@ -135,3 +139,4 @@
 
     return amaster;
 }
+#endif //__ANDROID__
